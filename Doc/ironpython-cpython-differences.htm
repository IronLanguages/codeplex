<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252" />
<title>IronPython Tutorial</title>
<link rel="stylesheet" type="text/css" href="IronPython.css">
<style>
<!--
.sbody       { font-family: Georgia; font-size: 10pt; margin-bottom: 6pt }
.sbullet     { font-family: Georgia; font-size: 10pt; list-style-type: none }
-->
</style>
</head>

<body lang="EN-US">

<div class="Section1">
	<p class="Title2">Differences between CPython and IronPython</p>
	<p>&nbsp;</p>
	<hr />
	<p class="CopyrightText">Information in this document is subject to change without 
	notice. The example companies, organizations, products, people, and events depicted 
	herein are fictitious. No association with any real company, organization, product, 
	person or event is intended or should be inferred. Complying with all applicable 
	copyright laws is the responsibility of the user. Without limiting the rights 
	under copyright, no part of this document may be reproduced, stored in or introduced 
	into a retrieval system, or transmitted in any form or by any means (electronic, 
	mechanical, photocopying, recording, or otherwise), or for any purpose, without 
	the express written permission of Microsoft Corporation.</p>
	<p class="CopyrightText">&nbsp;</p>
	<p class="CopyrightText">Microsoft may have patents, patent applications, trademarked, 
	copyrights, or other intellectual property rights covering subject matter in 
	this document. Except as expressly provided in any written license agreement 
	from Microsoft, the furnishing of this document does not give you any license 
	to these patents, trademarks, copyrights, or other intellectual property.</p>
	<p class="CopyrightText">&nbsp;</p>
	<p class="CopyrightText">© Microsoft Corporation. All rights reserved.</p>
	<p class="CopyrightText">&nbsp;</p>
	<p class="CopyrightText">Microsoft, MS-DOS, MS, Windows, Windows NT, MSDN, Active 
	Directory, BizTalk, SQL Server, SharePoint, Outlook, PowerPoint, FrontPage, 
	Visual Basic, Visual C++, Visual J++, Visual InterDev, Visual SourceSafe, Visual 
	C#, Visual J#,&nbsp; and Visual Studio are either registered trademarks or trademarks 
	of Microsoft Corporation in the U.S.A. and/or other countries.</p>
	<p class="CopyrightText">&nbsp;</p>
	<p class="CopyrightText">Other product and company names herein may be the trademarks of their respective owners.</p>
	<hr />
	<p class="Normal">&nbsp;</p>
	<h1>Introduction</h1>
	<P class="sbody">CPython and IronPython are two different implementations of the Python 
      language.&nbsp; While a <A href="http://www.python.org/doc/ref">Language 
      Reference</A> exists for the Python language, there are a number of 
      features of the language that are incompletely specified.&nbsp; The following 
      lists all known differences between the two implementations of the Python 
      language.&nbsp; These differences range from the trivial (such as, IronPython 
	(XXX get sample) to the dramatic (XXX get example).<P class="sbody">Any other differences not listed here 
	are purely an accidental omission.&nbsp; Please submit a bug report at
	<a href="http://www.codeplex.com/ironpython">www.codeplex.com/ironpython</a> 
	so that we can either fix the difference or update this document until we 
	can fix it. 
	<P class="sbody">This list has been updated to describe the differences between 
      IronPython 1.0 and CPython 2.0.<p class="sbody">&nbsp;</p>
	<h1>Syntax</h1>
	<P class="Body"></P>
	<p class="sbody">XXX generic type syntax</p>
	<p class="Body">&nbsp;</p>
	<h1>Standard Types, Functions, and Behaviors</h1>
	<p class="sbody">XXX Bug PS68/CP378.&nbsp; IronPython does not use a single 
	type object to represent all types in the system, but CPython does.&nbsp; If 
	programmers try to test whether an object is a type object by using Python's 
	identity operator (is), instead of using instanceof(), then they will get 
	different results.</p>
	<p class="sbody">IronPython is less restrictive for some string methods with 
	respect to allowing keyword arguments.&nbsp; For example, the following 
	works in IronPython but raises an error in CPython:</p>
	<p class="Code-Background">x = &quot;&quot;</p>
	<p class="Code-Background">x.center(1, fillchar='*')</p>
	<p class="sbody">IronPython allows setting attributes on built-in functions.</p>
	<p class="sbody">IronPython does not allow you to set attributes on __builtins__, 
	but CPython does let you do this.</p>
	<p class="sbody">IronPython allows you to set the value of __builtins__, as 
	does CPython, but the results are different.&nbsp; For example, import will 
	no longer work in IronPython, but the built-in function min() will continue 
	to work.</p>
	<p class="sbody">IronPython reports the value of __builtins__ to be a type, 
	but CPython reports it to be a module.</p>
	<p class="sbody">IronPython does not include local variables in co_varnames.&nbsp; 
	For example, &quot;foo.func_code.co-varnames&quot; for &quot;def foo (x, y): z = 10&quot; only 
	returns 'x' and 'y'.</p>
	<p class="sbody">IronPython raises a ValueError for very large exponents 
	(for example, 10 ** 735293857239475) while CPython hangs trying to compute 
	the number.&nbsp; <i>We probably won't fix this one.</i></p>
	<p class="sbody">IronPython's compile function behaves differently than 
	CPython's.&nbsp; CPython's compile function raises a SyntaxError for some 
	trailing whitespace, but it does not do this when compiling a file.&nbsp; 
	For example, the &quot;x = compile('def f(a):\n\treturn a\n\t', '', 'single')&quot; 
	trailing \t causes an error in this case.&nbsp; <i>We do not intend to fix 
	this difference.</i></p>
	<p class="sbody">IronPython uses unicode characters and strings, not ASCII as CPython 
	does.&nbsp; For example &quot;'%c' % i&quot; for 255 &lt; i &lt;65536 raises an error in 
	CPython but succeeds in IronPython.&nbsp; <i>We may wait to see how Python3k 
	incorporate unicode before fixing this.</i></p>
	<p class="sbody">XXX BUG PS682 (IronPython: Compiler error if class name 
	contains characters other than A-Z).&nbsp; IS THIS AN INCOMPATIBILITY???&nbsp; 
	IronPython will compile files whose identifiers use non-ASCII characters if 
	the file has an encoding comment such as &quot;# -*- coding: utf-8 -*-&quot;.</p>
	<p class="sbody">IronPython does not support a DeprecationWarning mechanism.</p>
	<p class="sbody">IronPython does not support a -W switch to control 
	warnings.</p>
	<p class="sbody">IronPython has slightly different system-defined attribute 
	names on some types.&nbsp; For example, try &quot;dir(True)&quot; in both CPython and 
	IronPython.</p>
	<p class="sbody">XXX BUG PS885 (changing sys.stdout does not affect 
	Console.Out).&nbsp; IS THIS AN INCOMPATIBILITY???&nbsp; There's are argument 
	that our behavior is correct (or useful) in the bug since Python does not 
	distinguish sys.terminalIO from stdout.&nbsp; How and where should this be 
	captured if not as an incompatibility?</p>
	<p class="sbody">If executing within the dynamic context of a generator, and 
	an exception is raised, IronPython exhibits a different behavior than 
	CPython.&nbsp; IronPython will continually re-raise the same exception every 
	time you call next() on the generator.&nbsp; CPython raises a StopIteration 
	exception on subsequent calls to next().</p>
	<p class="sbody">IronPython does not handle falling off the end of generator 
	functions the same way as CPython.&nbsp; When you call next() after a last 
	yield statement has executed, IronPython continually returns execution to 
	the point immediately after that yield statement, executes to the end of the 
	function, and then raises a StopIteration exception.&nbsp; CPython executes 
	from the last yield to the end of the function only one time, and then 
	subsequent calls to next() immediately raise a StopIteration exception.</p>
	<p class="sbody">IronPython does not allow yield statements in nested try 
	blocks.</p>
	<p class="sbody">IronPython does not allow you to 
	open a file for writing and separately open it for reading, but CPython does 
	let you do this<i>.</i></p>
	<p class="sbody">IronPython raises an exception when it cannot convert a 
	string to a unicode string, and CPython just returns the argument to unicode().</p>
	<p class="sbody">XXX IronPython's _codecs module implementation is 
	incomplete.&nbsp; There are several replace_error/lookup_error handlers that 
	IronPython does not implement.</p>
	<p class="sbody">XXX Bug (CP1060 implement type.mro()).&nbsp; IronPython 
	does not implement type.mro, and user overrides do not affect how a type's 
	__mro__ works.</p>
	<p class="sbody">IronPython does not have an xxsubtypes built in module.</p>
</div>
<div class="Section1">
	<p class="sbody">XXX (how to better characterize this???) IronPython does 
	not support overriding __getattribute__ for some user-defined subclasses of 
	built in types.</p>
	<p class="sbody">XXX Bug PS 1056 (assigning to new style class's __str__).&nbsp; 
	Not sure how to capture this, and CPython seems to allow some bizarre sets 
	as well, without checking that the value is callable until you do something 
	that tries to invoke it.</p>
	<p class="sbody">&nbsp;</p>
	<p class="sbody">&nbsp;</p>
	<p class="sbody">&nbsp;</p>
	<p class="sbody">
        Printing numbers on a machine with French locales produces different output:</p>
    <p>
        <blockquote>
			<table id="table8">
				<tr>
					<td>IronPython</td>
					<td>CPython</td>
				</tr>
				<tr>
					<td>
					<pre>&gt;&gt;&gt; x = 1.234
&gt;&gt;&gt; x
1.234
&gt;&gt;&gt; print x<strong>
1,234</strong></pre></td>
					<td>
					<pre>&gt;&gt;&gt; x = 1.234
&gt;&gt;&gt; x
1.234
&gt;&gt;&gt; print x<strong>
1.234</strong></pre></td>
				</tr>
			</table>
	</blockquote>
	<p class="sbody">Small integer caching in IronPython is different than in standard 
	CPython.&nbsp; Code such as:</p>
	<p class="Code-Background">i = 2<br>
	i is 2</p>
	<p class="sbody">will produce different results in IronPython and CPython.&nbsp; However, the 
	consistency of the result of such expressions is not guaranteed even within CPython which seems to be using different small integer caching strategies 
	for different situations:</p>
	<blockquote>
		<table border="0" id="table9" width="250">
			<tr>
				<td>IronPython</td>
				<td width="124">CPython</td>
			</tr>
			<tr>
				<td>
				<pre>&gt;&gt;&gt; i=5
&gt;&gt;&gt; i is 5
False
&gt;&gt;&gt; i=5000
&gt;&gt;&gt; i is 5000
False</pre></td>
				<td width="124">
				<pre>&gt;&gt;&gt; i = 5
&gt;&gt;&gt; i is 5
True
&gt;&gt;&gt; i = 5000
&gt;&gt;&gt; i is 5000
False</pre></td>
			</tr>
		</table>
	</blockquote>


	<p class="sbody">&nbsp;</p>
	<h1><a name="Extension_Modules">Extension Modules</a></h1>
	<p class="sbody">IronPyton does not support &quot;import __future__&quot; or &quot;from 
	__future__ ...&quot;.&nbsp; To include all Python 2.5 features that 
	IronPython implements, 
	invoke the interpreter (ipy.exe) with the &quot;-X:Python25&quot; switch.</p>
	<p class="sbody">XXX Is there a standard future set of features we should 
	have implemented, or this doesn't matter for documentation of 
	incompatibilities?</p>
	<p class="sbody">IronPython support importing .NET Frameworks assemblies as 
	extension modules.&nbsp; Usually you need to import the built-in extension 
	module clr and then call one of the clr.AddReference... functions.</p>
	<p class="sbody">Some CPython builtin extension modules do not exist in 
	IronPython.&nbsp; The following should be added:</p>
	<table border="1" width="100%" id="table6">
		<tr>
			<td width="218">
			<ul>
				<li>
				<p class="Body"><font face="Georgia" size="2">_bisect</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_codecs_hk</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">audioop</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_multibytecodec</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">parser</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">array</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">msvcrt</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_codecs_kr</font></p></li>
			</ul>
			</td>
			<td width="221">
			<ul>
				<li>
				<p class="Body"><font face="Georgia" size="2">_heapq</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_codecs_jp</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">imageop</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">mmap</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_subprocess</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_codecs_tw</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">regex</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">sys XXX ??? how???</font></p></li>
			</ul>
			</td>
			<td width="208">
			<ul>
				<li>
				<p class="Body"><font face="Georgia" size="2">zipimport</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">xxsubtype</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_codecs_cn</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">md5</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_codecs_iso2022</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">rgbimg</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_csv</font></p></li>
			</ul>
			<p>&nbsp;</td>
			<td>
			<ul>
				<li>
				<p class="Body"><font face="Georgia" size="2">signal</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_hotshot</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">sha</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">cmath</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_symtable</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">_winreg</font></p></li>
				<li>
				<p class="Body"><font face="Georgia" size="2">strop</font></p></li>
			</ul>
			<p>&nbsp;</td>
		</tr>
	</table>
	<p class="sbody">The following are highly unlikely to be added any time soon:</p>
	<table border="1" width="100%" id="table7">
		<tr>
			<td width="219"><font face="Georgia" size="2">XXX </font> </td>
			<td width="224">&nbsp;</td>
			<td width="204">&nbsp;</td>
			<td>&nbsp;</td>
		</tr>
	</table>
	<p class="sbody">IronPython has these additional modules: 're', 'copy_reg', 'socket'.&nbsp; 
	These are built in rather than being implemented in Python either to 
	leverage the .NET Frameworks or to avoid dependencies on CPython for a 
	minimal installation.</p>
	<p class="Body">&nbsp;</p>
	<h1>Interpreter and environment</h1>
	<p class="sbody">IronPython does not by default have the standard CPython 
	libs on its path.&nbsp; <i>Fixed by adding these two lines to the site.py 
	file in the IronPython lib directory:</i></p>
	<p class="Code-Background">import sys<br>
	sys.path.append(r&quot;c:\python24\lib&quot;)</p>
	<p class="sbody">IronPython does not redirect the interpreter's error output 
	in response to setting sys.stderr.</p>
	<p class="sbody">IronPython has different command line editing support than 
	CPython.</p>
	<p class="sbody">IronPython supports different command 
        line options than CPython.&nbsp; Invoke ipy.exe with the &quot;-?&quot; switch to 
	see options.</p>
	<p class="sbody">IronPython's sys.builtin_module_names tuple contains 
	different values than CPython's result.&nbsp; See section
	<a href="#Extension_Modules">Extension Modules</a> for differences.</p>
</div>


<div class="Section1">
	<p class="sbody">IronPython has several incompatibilities relating to the 
	interpreter and the sys module hooks:</p><font SIZE="1">
	<ul>
		<li>
		<p class="sbody" style="margin-bottom: 0">settrace</li>
	</ul>
	<blockquote>
		<p class="sbody" style="margin-bottom: 0">Calling this raises a 
		NotImplementedException.</p>
	</blockquote>
	<ul>
		<li>
		<p class="sbody" style="margin-bottom: 0">api_version</li>
	</ul>
	<blockquote>
		<p class="sbody" style="margin-bottom: 0">This always has the value: &quot;IronPython 
		does not support the C APIs, the api_version is not supported&quot;.</p>
	</blockquote>
	<ul>
		<li>
		<p class="sbody" style="margin-bottom: 0">displayhook</li>
	</ul>
	<blockquote>
		<p class="sbody" style="margin-bottom: 0">Setting this will throw a 
		NotImplementedException.</p>
	</blockquote>
	<ul>
		<li>
		<p class="sbody">_getframe</li>
	</ul>
	<blockquote>
		<p class="sbody">Calling this function raises a ValueError exception.</p>
	</blockquote>
	<ul>
		<li>
		<p class="sbody">__excepthook__</li>
	</ul>
	<blockquote>
		<p class="sbody">IronPython does not support __excepthook because it 
		does not implement sys.excepthook().&nbsp; IronPython does not currently 
		support replacing function definitions in the sys module.&nbsp; Note, 
		excepthook is an attribute in the sys module, but it is bound to a 
		string: &quot;IronPython does not support sys.excepthook&quot;.</p>
	</blockquote>
	<ul>
		<li>
		<p class="sbody">setcheckinterval</li>
	</ul>
	<blockquote>
		<p class="sbody">IronPython does not use the value set with this 
		function.</p>
	</blockquote>
	</font>
</div>
	<p class="sbody">&nbsp;</p>
	<h1>Interpreter and environment</h1>
	<p class="sbody">IronPython has a more modern GC whereas CPython uses reference 
        counting, and IronPython's GC choice is considered to be a valid and 
	acceptable implementation.&nbsp; This has several effects which are listed 
	below.</p>
<p class="sbody">IronPython users don't need to worry about 
        handling circular references as these are guaranteed to be collected 
        properly.&nbsp; <i>This behavior is acceptable.</i></p>
<p class="sbody">IronPython does not have guarantees for when finalization or 
system resource freeing occurs.&nbsp; This can cause problems for people 
        who use open("foo", 'r').read() excessively. <I>&nbsp;This behavior are 
        acceptable.</I> </p>
	<p class="sbody">IronPython does not immediately invoke __del__ methods when 
	del is called on a variable; it happens during the next GC pass.&nbsp; <i>
	This behavior is acceptable.</i></p>
	<font SIZE="1">
<p class="sbody">Calling sys.getrefcount raises a NotImplementedError.&nbsp; <i>
Alternatively IronPython could always return could always return some positive 
constant since there's a reference that was passed to getrefcount.</i></p>
</font>


</body>

</html>
