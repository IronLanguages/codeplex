/* ****************************************************************************
 *
 * Copyright (c) Microsoft Corporation. 
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/

#if DEBUG
namespace Microsoft.Scripting.Ast {
    partial class AstWriter {

        private delegate void Writer(AstWriter ar, Expression expr);

        private static readonly Writer[] _Writers = {
            #region Generated Ast Writer

            // *** BEGIN GENERATED CODE ***
            // generated by function: gen_ast_writer from: generate_tree.py

            WriteBinaryExpression,                  //    Add
                                                    // ** AddChecked
            WriteBinaryExpression,                  //    And
            WriteBinaryExpression,                  //    AndAlso
                                                    // ** ArrayLength
            WriteBinaryExpression,                  //    ArrayIndex
            WriteMethodCallExpression,              //    Call
                                                    // ** Coalesce
            WriteConditionalExpression,             //    Conditional
            WriteConstantExpression,                //    Constant
            WriteUnaryExpression,                   //    Convert
                                                    // ** ConvertChecked
            WriteBinaryExpression,                  //    Divide
            WriteBinaryExpression,                  //    Equal
            WriteBinaryExpression,                  //    ExclusiveOr
            WriteBinaryExpression,                  //    GreaterThan
            WriteBinaryExpression,                  //    GreaterThanOrEqual
                                                    // ** Invoke
            WriteLambdaExpression,                  //    Lambda
            WriteBinaryExpression,                  //    LeftShift
            WriteBinaryExpression,                  //    LessThan
            WriteBinaryExpression,                  //    LessThanOrEqual
                                                    // ** ListInit
                                                    // ** MemberAccess
                                                    // ** MemberInit
            WriteBinaryExpression,                  //    Modulo
            WriteBinaryExpression,                  //    Multiply
                                                    // ** MultiplyChecked
            WriteUnaryExpression,                   //    Negate
                                                    // ** UnaryPlus
                                                    // ** NegateChecked
            WriteNewExpression,                     //    New
                                                    // ** NewArrayInit
            WriteNewArrayExpression,                //    NewArrayBounds
            WriteUnaryExpression,                   //    Not
            WriteBinaryExpression,                  //    NotEqual
            WriteBinaryExpression,                  //    Or
            WriteBinaryExpression,                  //    OrElse
                                                    // ** Parameter
                                                    // ** Power
                                                    // ** Quote
            WriteBinaryExpression,                  //    RightShift
            WriteBinaryExpression,                  //    Subtract
                                                    // ** SubtractChecked
                                                    // ** TypeAs
            WriteTypeBinaryExpression,              //    TypeIs
            WriteActionExpression,                  //    ActionExpression
            WriteArrayIndexAssignment,              //    ArrayIndexAssignment
            WriteBlock,                             //    Block
            WriteBoundAssignment,                   //    BoundAssignment
            WriteBreakStatement,                    //    BreakStatement
            WriteIntrinsicExpression,               //    CodeContextExpression
            WriteIntrinsicExpression,               //    GeneratorIntrinsic
            WriteGeneratorLambdaExpression,         //    Generator
            WriteContinueStatement,                 //    ContinueStatement
            WriteDeleteStatement,                   //    DeleteStatement
            WriteDeleteUnboundExpression,           //    DeleteUnboundExpression
            WriteDoStatement,                       //    DoStatement
            WriteEmptyStatement,                    //    EmptyStatement
            WriteIntrinsicExpression,               //    EnvironmentExpression
            WriteExpressionStatement,               //    ExpressionStatement
            WriteVariableExpression,                //    GlobalVariable
            WriteLabeledStatement,                  //    LabeledStatement
            WriteVariableExpression,                //    LocalVariable
            WriteLoopStatement,                     //    LoopStatement
            WriteMemberAssignment,                  //    MemberAssignment
            WriteMemberExpression,                  //    MemberExpression
            WriteNewArrayExpression,                //    NewArrayExpression
            WriteUnaryExpression,                   //    OnesComplement
            WriteVariableExpression,                //    Parameter
            WriteReturnStatement,                   //    ReturnStatement
            WriteScopeStatement,                    //    ScopeStatement
            WriteSwitchStatement,                   //    SwitchStatement
            WriteVariableExpression,                //    TemporaryVariable
            WriteThrowStatement,                    //    ThrowStatement
            WriteTryStatement,                      //    TryStatement
            WriteUnboundAssignment,                 //    UnboundAssignment
            WriteUnboundExpression,                 //    UnboundExpression
            WriteYieldStatement,                    //    YieldStatement

            // *** END GENERATED CODE ***

            #endregion
        };

    }
}
#endif
