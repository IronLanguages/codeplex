/* ****************************************************************************
 *
 * Copyright (c) Microsoft Corporation. 
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;

namespace System.Linq.Expressions {
    //TODO: strings should come from localized resources
    //CONFORMING
    /// <summary>
    ///    Strongly-typed and parameterized exception factory.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2201:DoNotRaiseReservedExceptionTypes")]
    internal static partial class Error {


        #region Generated Exception Factory

        // *** BEGIN GENERATED CODE ***
        // generated by function: gen_expr_factory from: generate_exception_factory.py

        /// <summary>
        /// InvalidOperationException with message like "Action should have been reduced."
        /// </summary>
        internal static Exception ActionNotReduced() {
            return new InvalidOperationException("Action should have been reduced.");
        }

        /// <summary>
        /// NotSupportedException with message like "Cannot emit address of void-typed block."
        /// </summary>
        internal static Exception AddressOfVoidBlock() {
            return new NotSupportedException("Cannot emit address of void-typed block.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Already initialized."
        /// </summary>
        internal static Exception AlreadyInitialized() {
            return new InvalidOperationException("Already initialized.");
        }

        /// <summary>
        /// System.Reflection.AmbiguousMatchException with message like "There are valid conversions from {0} to {1}."
        /// </summary>
        internal static Exception AmbiguousConversion(object p0, object p1) {
            return new System.Reflection.AmbiguousMatchException(string.Format("There are valid conversions from {0} to {1}.", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Argument type cannot be System.Void."
        /// </summary>
        internal static Exception ArgumentCannotBeOfTypeVoid() {
            return new ArgumentException("Argument type cannot be System.Void.");
        }

        /// <summary>
        /// ArgumentException with message like "Argument count (including instance) '{0}' must match arguments in the binding information '{1}'"
        /// </summary>
        internal static Exception ArgumentCountMustMatchBinding(object p0, object p1) {
            return new ArgumentException(string.Format("Argument count (including instance) '{0}' must match arguments in the binding information '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like " The member '{0}' is not declared on type '{1}' being created"
        /// </summary>
        internal static Exception ArgumentMemberNotDeclOnType(object p0, object p1) {
            return new ArgumentException(string.Format(" The member '{0}' is not declared on type '{1}' being created", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be array"
        /// </summary>
        internal static Exception ArgumentMustBeArray() {
            return new ArgumentException("Argument must be array");
        }

        /// <summary>
        /// ArgumentException with message like "Argument for array index must be of type Int32"
        /// </summary>
        internal static Exception ArgumentMustBeArrayIndexType() {
            return new ArgumentException("Argument for array index must be of type Int32");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be boolean"
        /// </summary>
        internal static Exception ArgumentMustBeBoolean() {
            return new ArgumentException("Argument must be boolean");
        }

        /// <summary>
        /// ArgumentException with message like "Argument for a checked operation must be of type Int32, UInt32, Int64 or UInt64"
        /// </summary>
        internal static Exception ArgumentMustBeCheckable() {
            return new ArgumentException("Argument for a checked operation must be of type Int32, UInt32, Int64 or UInt64");
        }

        /// <summary>
        /// ArgumentException with message like "Argument type must be comparable"
        /// </summary>
        internal static Exception ArgumentMustBeComparable() {
            return new ArgumentException("Argument type must be comparable");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be of a convertible type"
        /// </summary>
        internal static Exception ArgumentMustBeConvertible() {
            return new ArgumentException("Argument must be of a convertible type");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be either a FieldInfo or PropertyInfo"
        /// </summary>
        internal static Exception ArgumentMustBeFieldInfoOrPropertInfo() {
            return new ArgumentException("Argument must be either a FieldInfo or PropertyInfo");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be either a FieldInfo, PropertyInfo or MethodInfo"
        /// </summary>
        internal static Exception ArgumentMustBeFieldInfoOrPropertInfoOrMethod() {
            return new ArgumentException("Argument must be either a FieldInfo, PropertyInfo or MethodInfo");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be an instance member"
        /// </summary>
        internal static Exception ArgumentMustBeInstanceMember() {
            return new ArgumentException("Argument must be an instance member");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be of type Int32"
        /// </summary>
        internal static Exception ArgumentMustBeInt32() {
            return new ArgumentException("Argument must be of type Int32");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be of an integer type"
        /// </summary>
        internal static Exception ArgumentMustBeInteger() {
            return new ArgumentException("Argument must be of an integer type");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be of an integer or boolean type"
        /// </summary>
        internal static Exception ArgumentMustBeIntegerOrBoolean() {
            return new ArgumentException("Argument must be of an integer or boolean type");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be of a numeric type"
        /// </summary>
        internal static Exception ArgumentMustBeNumeric() {
            return new ArgumentException("Argument must be of a numeric type");
        }

        /// <summary>
        /// ArgumentException with message like "Argument must be single dimensional array type"
        /// </summary>
        internal static Exception ArgumentMustBeSingleDimensionalArrayType() {
            return new ArgumentException("Argument must be single dimensional array type");
        }

        /// <summary>
        /// ArgumentException with message like " Argument type '{0}' does not match the corresponding member type '{1}'"
        /// </summary>
        internal static Exception ArgumentTypeDoesNotMatchMember(object p0, object p1) {
            return new ArgumentException(string.Format(" Argument type '{0}' does not match the corresponding member type '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Argument types do not match"
        /// </summary>
        internal static Exception ArgumentTypesMustMatch() {
            return new ArgumentException("Argument types do not match");
        }

        /// <summary>
        /// InvalidOperationException with message like "Bad data bound to delegate."
        /// </summary>
        internal static Exception BadDelegateData() {
            return new InvalidOperationException("Bad data bound to delegate.");
        }

        /// <summary>
        /// InvalidOperationException with message like "The binary operator {0} is not defined for the types '{1}' and '{2}'."
        /// </summary>
        internal static Exception BinaryOperatorNotDefined(object p0, object p1, object p2) {
            return new InvalidOperationException(string.Format("The binary operator {0} is not defined for the types '{1}' and '{2}'.", p0, p1, p2));
        }

        /// <summary>
        /// InvalidOperationException with message like "Bind cannot return null."
        /// </summary>
        internal static Exception BindingCannotBeNull() {
            return new InvalidOperationException("Bind cannot return null.");
        }

        /// <summary>
        /// ArgumentException with message like "COM object does not support events."
        /// </summary>
        internal static Exception COMObjectDoesNotSupportEvents() {
            return new ArgumentException("COM object does not support events.");
        }

        /// <summary>
        /// ArgumentException with message like "COM object does not support specified source interface."
        /// </summary>
        internal static Exception COMObjectDoesNotSupportSourceInterface() {
            return new ArgumentException("COM object does not support specified source interface.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Cannot auto initialize elements of value type through property '{0}', use assignment instead"
        /// </summary>
        internal static Exception CannotAutoInitializeValueTypeElementThroughProperty(object p0) {
            return new InvalidOperationException(string.Format("Cannot auto initialize elements of value type through property '{0}', use assignment instead", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Cannot auto initialize members of value type through property '{0}', use assignment instead"
        /// </summary>
        internal static Exception CannotAutoInitializeValueTypeMemberThroughProperty(object p0) {
            return new InvalidOperationException(string.Format("Cannot auto initialize members of value type through property '{0}', use assignment instead", p0));
        }

        /// <summary>
        /// ArgumentException with message like "An expression of type '{0}' cannot be cast to type '{1}'"
        /// </summary>
        internal static Exception CannotCastTypeToType(object p0, object p1) {
            return new ArgumentException(string.Format("An expression of type '{0}' cannot be cast to type '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Cannot change non-caching value."
        /// </summary>
        internal static Exception CannotChangeNonCachingValue() {
            return new ArgumentException("Cannot change non-caching value.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Can not have fault and finally."
        /// </summary>
        internal static Exception CannotHaveFaultAndFinally() {
            return new InvalidOperationException("Can not have fault and finally.");
        }

        #if !SILVERLIGHT
        /// <summary>
        /// System.Runtime.InteropServices.COMException with message like "ResolveComReference.CannotRetrieveTypeInformation."
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2201:DoNotRaiseReservedExceptionTypes")]
        internal static Exception CannotRetrieveTypeInformation() {
            return new System.Runtime.InteropServices.COMException("ResolveComReference.CannotRetrieveTypeInformation.");
        }
        #endif

        /// <summary>
        /// ArgumentException with message like "Cannot emit constant {0} ({1})"
        /// </summary>
        internal static Exception CanotEmitConstant(object p0, object p1) {
            return new ArgumentException(string.Format("Cannot emit constant {0} ({1})", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Cannot create default value for type {0}."
        /// </summary>
        internal static Exception CantCreateDefaultTypeFor(object p0) {
            return new ArgumentException(string.Format("Cannot create default value for type {0}.", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Coalesce used with type that cannot be null"
        /// </summary>
        internal static Exception CoalesceUsedOnNonNullType() {
            return new InvalidOperationException("Coalesce used with type that cannot be null");
        }

        /// <summary>
        /// InvalidOperationException with message like "No coercion operator is defined between types '{0}' and '{1}'."
        /// </summary>
        internal static Exception CoercionOperatorNotDefined(object p0, object p1) {
            return new InvalidOperationException(string.Format("No coercion operator is defined between types '{0}' and '{1}'.", p0, p1));
        }

        /// <summary>
        /// NotSupportedException with message like "Collection is read-only."
        /// </summary>
        internal static Exception CollectionReadOnly() {
            return new NotSupportedException("Collection is read-only.");
        }

        /// <summary>
        /// ArgumentException with message like "COM object is expected."
        /// </summary>
        internal static Exception ComObjectExpected() {
            return new ArgumentException("COM object is expected.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Conflicting Ids."
        /// </summary>
        internal static Exception ConflictingIds() {
            return new InvalidOperationException("Conflicting Ids.");
        }

        /// <summary>
        /// MissingMemberException with message like "Could not get DispId for {0} (error:{1})."
        /// </summary>
        internal static Exception CouldNotGetDispId(object p0, object p1) {
            return new MissingMemberException(string.Format("Could not get DispId for {0} (error:{1}).", p0, p1));
        }

        /// <summary>
        /// InvalidProgramException with message like "Default value of COM parameter cannot be read properly."
        /// </summary>
        internal static Exception DefaultValueCannotBeRead() {
            return new InvalidProgramException("Default value of COM parameter cannot be read properly.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Delete should have been reduced."
        /// </summary>
        internal static Exception DeleteNotReduced() {
            return new InvalidOperationException("Delete should have been reduced.");
        }

        /// <summary>
        /// System.Scripting.ArgumentTypeException with message like "Dictionaries are not hashable."
        /// </summary>
        internal static Exception DictionaryNotHashable() {
            return new System.Scripting.ArgumentTypeException("Dictionaries are not hashable.");
        }

        /// <summary>
        /// System.Reflection.TargetParameterCountException with message like "Error while invoking {0}."
        /// </summary>
        internal static Exception DispBadParamCount(object p0) {
            return new System.Reflection.TargetParameterCountException(string.Format("Error while invoking {0}.", p0));
        }

        /// <summary>
        /// MissingMemberException with message like "Error while invoking {0}."
        /// </summary>
        internal static Exception DispMemberNotFound(object p0) {
            return new MissingMemberException(string.Format("Error while invoking {0}.", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Error while invoking {0}. Named arguments are not supported."
        /// </summary>
        internal static Exception DispNoNamedArgs(object p0) {
            return new ArgumentException(string.Format("Error while invoking {0}. Named arguments are not supported.", p0));
        }

        /// <summary>
        /// OverflowException with message like "Error while invoking {0}."
        /// </summary>
        internal static Exception DispOverflow(object p0) {
            return new OverflowException(string.Format("Error while invoking {0}.", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Error while invoking {0}. A required parameter was omitted."
        /// </summary>
        internal static Exception DispParamNotOptional(object p0) {
            return new ArgumentException(string.Format("Error while invoking {0}. A required parameter was omitted.", p0));
        }

        /// <summary>
        /// System.Scripting.ArgumentTypeException with message like "Could not convert argument {0} for call to {1}."
        /// </summary>
        internal static Exception DispTypeMismatch(object p0, object p1) {
            return new System.Scripting.ArgumentTypeException(string.Format("Could not convert argument {0} for call to {1}.", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "Dynamic expression not reduced."
        /// </summary>
        internal static Exception DynamicNotReduced() {
            return new InvalidOperationException("Dynamic expression not reduced.");
        }

        /// <summary>
        /// ArgumentException with message like "Parameter '{0}' of element initializer method '{1}' must not be a pass by reference parameter"
        /// </summary>
        internal static Exception ElementInitializerMethodNoRefOutParam(object p0, object p1) {
            return new ArgumentException(string.Format("Parameter '{0}' of element initializer method '{1}' must not be a pass by reference parameter", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Element initializer method must be named 'Add'"
        /// </summary>
        internal static Exception ElementInitializerMethodNotAdd() {
            return new ArgumentException("Element initializer method must be named 'Add'");
        }

        /// <summary>
        /// ArgumentException with message like "Element initializer method must be an instance method"
        /// </summary>
        internal static Exception ElementInitializerMethodStatic() {
            return new ArgumentException("Element initializer method must be an instance method");
        }

        /// <summary>
        /// ArgumentException with message like "Element initializer method must have at least 1 parameter"
        /// </summary>
        internal static Exception ElementInitializerMethodWithZeroArgs() {
            return new ArgumentException("Element initializer method must have at least 1 parameter");
        }

        /// <summary>
        /// InvalidOperationException with message like "Empty rule set does not have target."
        /// </summary>
        internal static Exception EmptyRuleSetTarget() {
            return new InvalidOperationException("Empty rule set does not have target.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Enumeration already finished."
        /// </summary>
        internal static Exception EnumerationFinished() {
            return new InvalidOperationException("Enumeration already finished.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Enumeration has not started. Call MoveNext."
        /// </summary>
        internal static Exception EnumerationNotStarted() {
            return new InvalidOperationException("Enumeration has not started. Call MoveNext.");
        }

        /// <summary>
        /// System.Scripting.ArgumentTypeException with message like "expected bound event, got {0}."
        /// </summary>
        internal static Exception ExpectedBoundEvent(object p0) {
            return new System.Scripting.ArgumentTypeException(string.Format("expected bound event, got {0}.", p0));
        }

        /// <summary>
        /// ArgumentException with message like "A lambda expression cannot contain pass by reference parameters."
        /// </summary>
        internal static Exception ExpressionMayNotContainByrefParameters() {
            return new ArgumentException("A lambda expression cannot contain pass by reference parameters.");
        }

        /// <summary>
        /// InvalidOperationException with message like "An expression of type '{0}' cannot be used to initialize an array of type '{1}'"
        /// </summary>
        internal static Exception ExpressionTypeCannotInitializeArrayType(object p0, object p1) {
            return new InvalidOperationException(string.Format("An expression of type '{0}' cannot be used to initialize an array of type '{1}'", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "An expression of type '{0}' cannot be used to initialize an collection of type '{1}'"
        /// </summary>
        internal static Exception ExpressionTypeCannotInitializeCollectionType(object p0, object p1) {
            return new InvalidOperationException(string.Format("An expression of type '{0}' cannot be used to initialize an collection of type '{1}'", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "An expression of type '{0}' cannot be used to initialize an array of type '{1}'"
        /// </summary>
        internal static Exception ExpressionTypeDoesNotMatchArrayType(object p0, object p1) {
            return new InvalidOperationException(string.Format("An expression of type '{0}' cannot be used to initialize an array of type '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Expression of type '{0}' cannot be used for constructor parameter of type '{1}'"
        /// </summary>
        internal static Exception ExpressionTypeDoesNotMatchConstructorParameter(object p0, object p1) {
            return new ArgumentException(string.Format("Expression of type '{0}' cannot be used for constructor parameter of type '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Expression of type '{0}' cannot be used for parameter of type '{1}' of method '{2}'"
        /// </summary>
        internal static Exception ExpressionTypeDoesNotMatchMethodParameter(object p0, object p1, object p2) {
            return new ArgumentException(string.Format("Expression of type '{0}' cannot be used for parameter of type '{1}' of method '{2}'", p0, p1, p2));
        }

        /// <summary>
        /// ArgumentException with message like "Expression of type '{0}' cannot be used for parameter of type '{1}'"
        /// </summary>
        internal static Exception ExpressionTypeDoesNotMatchParameter(object p0, object p1) {
            return new ArgumentException(string.Format("Expression of type '{0}' cannot be used for parameter of type '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Expression of type '{0}' cannot be used for return type '{1}'"
        /// </summary>
        internal static Exception ExpressionTypeDoesNotMatchReturn(object p0, object p1) {
            return new ArgumentException(string.Format("Expression of type '{0}' cannot be used for return type '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Expression of type '{0}' cannot be invoked"
        /// </summary>
        internal static Exception ExpressionTypeNotInvocable(object p0) {
            return new ArgumentException(string.Format("Expression of type '{0}' cannot be invoked", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Extension type {0} must be public."
        /// </summary>
        internal static Exception ExtensionMustBePublic(object p0) {
            return new ArgumentException(string.Format("Extension type {0} must be public.", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Extension should have been reduced."
        /// </summary>
        internal static Exception ExtensionNotReduced() {
            return new InvalidOperationException("Extension should have been reduced.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Fault already defined."
        /// </summary>
        internal static Exception FaultAlreadyDefined() {
            return new InvalidOperationException("Fault already defined.");
        }

        /// <summary>
        /// ArgumentException with message like "Field '{0}' is not defined for type '{1}'"
        /// </summary>
        internal static Exception FieldNotDefinedForType(object p0, object p1) {
            return new ArgumentException(string.Format("Field '{0}' is not defined for type '{1}'", p0, p1));
        }

        /// <summary>
        /// MissingMemberException with message like "Field {0} is read-only"
        /// </summary>
        internal static Exception FieldReadonly(object p0) {
            return new MissingMemberException(string.Format("Field {0} is read-only", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Finally already defined."
        /// </summary>
        internal static Exception FinallyAlreadyDefined() {
            return new InvalidOperationException("Finally already defined.");
        }

        /// <summary>
        /// InvalidOperationException with message like "RuleBuilder can only be used with delegates whose first argument is CallSite."
        /// </summary>
        internal static Exception FirstArgumentMustBeCallSite() {
            return new InvalidOperationException("RuleBuilder can only be used with delegates whose first argument is CallSite.");
        }

        /// <summary>
        /// ArgumentException with message like "Generating code from non-serializable CallSiteBinder."
        /// </summary>
        internal static Exception GenNonSerializableBinder() {
            return new ArgumentException("Generating code from non-serializable CallSiteBinder.");
        }

        /// <summary>
        /// System.Scripting.Runtime.InvalidImplementationException with message like "IDispatch::GetIDsOfNames behaved unexpectedly for {0}."
        /// </summary>
        internal static Exception GetIDsOfNamesInvalid(object p0) {
            return new System.Scripting.Runtime.InvalidImplementationException(string.Format("IDispatch::GetIDsOfNames behaved unexpectedly for {0}.", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Global/top-level local variable names must be unique."
        /// </summary>
        internal static Exception GlobalsMustBeUnique() {
            return new ArgumentException("Global/top-level local variable names must be unique.");
        }

        /// <summary>
        /// ArgumentException with message like "Incorrect number of arguments for the given members "
        /// </summary>
        internal static Exception IncorrectNumberOfArgumentsForMembers() {
            return new ArgumentException("Incorrect number of arguments for the given members ");
        }

        /// <summary>
        /// ArgumentException with message like "Incorrect number of arguments for constructor"
        /// </summary>
        internal static Exception IncorrectNumberOfConstructorArguments() {
            return new ArgumentException("Incorrect number of arguments for constructor");
        }

        /// <summary>
        /// ArgumentException with message like "Incorrect number of indexes"
        /// </summary>
        internal static Exception IncorrectNumberOfIndexes() {
            return new ArgumentException("Incorrect number of indexes");
        }

        /// <summary>
        /// InvalidOperationException with message like "Incorrect number of arguments supplied for lambda invocation"
        /// </summary>
        internal static Exception IncorrectNumberOfLambdaArguments() {
            return new InvalidOperationException("Incorrect number of arguments supplied for lambda invocation");
        }

        /// <summary>
        /// ArgumentException with message like "Incorrect number of parameters supplied for lambda declaration"
        /// </summary>
        internal static Exception IncorrectNumberOfLambdaDeclarationParameters() {
            return new ArgumentException("Incorrect number of parameters supplied for lambda declaration");
        }

        /// <summary>
        /// ArgumentException with message like " Incorrect number of members for constructor"
        /// </summary>
        internal static Exception IncorrectNumberOfMembersForGivenConstructor() {
            return new ArgumentException(" Incorrect number of members for constructor");
        }

        /// <summary>
        /// ArgumentException with message like "Incorrect number of arguments supplied for call to method '{0}'"
        /// </summary>
        internal static Exception IncorrectNumberOfMethodCallArguments(object p0) {
            return new ArgumentException(string.Format("Incorrect number of arguments supplied for call to method '{0}'", p0));
        }

        /// <summary>
        /// ArgumentException with message like "An incorrect number of type args were specified for the declaration of an Action type."
        /// </summary>
        internal static Exception IncorrectNumberOfTypeArgsForAction() {
            return new ArgumentException("An incorrect number of type args were specified for the declaration of an Action type.");
        }

        /// <summary>
        /// ArgumentException with message like "An incorrect number of type args were specified for the declaration of a Func type."
        /// </summary>
        internal static Exception IncorrectNumberOfTypeArgsForFunc() {
            return new ArgumentException("An incorrect number of type args were specified for the declaration of a Func type.");
        }

        /// <summary>
        /// ArgumentException with message like "The type used in TypeAs Expression must be of reference or nullable type, {0} is neither"
        /// </summary>
        internal static Exception IncorrectTypeForTypeAs(object p0) {
            return new ArgumentException(string.Format("The type used in TypeAs Expression must be of reference or nullable type, {0} is neither", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Invalid type of argument {0}; expecting {1}."
        /// </summary>
        internal static Exception InvalidArgumentType(object p0, object p1) {
            return new ArgumentException(string.Format("Invalid type of argument {0}; expecting {1}.", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Invalid assembly name or file extension."
        /// </summary>
        internal static Exception InvalidAsmNameOrExtension() {
            return new ArgumentException("Invalid assembly name or file extension.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Cannot cast from type '{0}' to type '{1}"
        /// </summary>
        internal static Exception InvalidCast(object p0, object p1) {
            return new InvalidOperationException(string.Format("Cannot cast from type '{0}' to type '{1}", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "Invalid lvalue for assignment: {0}."
        /// </summary>
        internal static Exception InvalidLvalue(object p0) {
            return new InvalidOperationException(string.Format("Invalid lvalue for assignment: {0}.", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Invalid member type: {0}."
        /// </summary>
        internal static Exception InvalidMemberType(object p0) {
            return new InvalidOperationException(string.Format("Invalid member type: {0}.", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Invalid operation: '{0}'"
        /// </summary>
        internal static Exception InvalidOperation(object p0) {
            return new ArgumentException(string.Format("Invalid operation: '{0}'", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Invalid output directory."
        /// </summary>
        internal static Exception InvalidOutputDir() {
            return new ArgumentException("Invalid output directory.");
        }

        /// <summary>
        /// ArgumentException with message like "Invalid number of parameters for the service."
        /// </summary>
        internal static Exception InvalidParamNumForService() {
            return new ArgumentException("Invalid number of parameters for the service.");
        }

        /// <summary>
        /// ArgumentException with message like "pecified path is invalid."
        /// </summary>
        internal static Exception InvalidPath() {
            return new ArgumentException("pecified path is invalid.");
        }

        /// <summary>
        /// ArgumentException with message like "Invalid stream type: {0}."
        /// </summary>
        internal static Exception InvalidStreamType(object p0) {
            return new ArgumentException(string.Format("Invalid stream type: {0}.", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Lambda Parameter not in scope"
        /// </summary>
        internal static Exception LambdaParameterNotInScope() {
            return new InvalidOperationException("Lambda Parameter not in scope");
        }

        /// <summary>
        /// ArgumentException with message like "Lambda type parameter must be derived from System.Delegate"
        /// </summary>
        internal static Exception LambdaTypeMustBeDerivedFromSystemDelegate() {
            return new ArgumentException("Lambda type parameter must be derived from System.Delegate");
        }

        /// <summary>
        /// InvalidOperationException with message like "language already registered."
        /// </summary>
        internal static Exception LanguageRegistered() {
            return new InvalidOperationException("language already registered.");
        }

        /// <summary>
        /// ArgumentException with message like "Left side of assignment is not an assignable node type."
        /// </summary>
        internal static Exception LhsUnassignable() {
            return new ArgumentException("Left side of assignment is not an assignable node type.");
        }

        /// <summary>
        /// ArgumentException with message like "List initializers must contain at least one initializer"
        /// </summary>
        internal static Exception ListInitializerWithZeroMembers() {
            return new ArgumentException("List initializers must contain at least one initializer");
        }

        /// <summary>
        /// ArgumentException with message like "The user-defined operator method '{1}' for operator '{0}' must have associated boolean True and False operators."
        /// </summary>
        internal static Exception LogicalOperatorMustHaveBooleanOperators(object p0, object p1) {
            return new ArgumentException(string.Format("The user-defined operator method '{1}' for operator '{0}' must have associated boolean True and False operators.", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "The user-defined operator method '{1}' for operator '{0}' must have identical parameter and return types."
        /// </summary>
        internal static Exception LogicalOperatorMustHaveConsistentTypes(object p0, object p1) {
            return new ArgumentException(string.Format("The user-defined operator method '{1}' for operator '{0}' must have identical parameter and return types.", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Member '{0}' not field or property"
        /// </summary>
        internal static Exception MemberNotFieldOrProperty(object p0) {
            return new ArgumentException(string.Format("Member '{0}' not field or property", p0));
        }

        /// <summary>
        /// MemberAccessException with message like "can only write to member {0}."
        /// </summary>
        internal static Exception MemberWriteOnly(object p0) {
            return new MemberAccessException(string.Format("can only write to member {0}.", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Method {0} contains generic parameters"
        /// </summary>
        internal static Exception MethodContainsGenericParameters(object p0) {
            return new ArgumentException(string.Format("Method {0} contains generic parameters", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "No method '{0}' exists on type '{1}'."
        /// </summary>
        internal static Exception MethodDoesNotExistOnType(object p0, object p1) {
            return new InvalidOperationException(string.Format("No method '{0}' exists on type '{1}'.", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Method {0} is a generic method definition"
        /// </summary>
        internal static Exception MethodIsGeneric(object p0) {
            return new ArgumentException(string.Format("Method {0} is a generic method definition", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Method '{0}' is not defined for type '{1}'"
        /// </summary>
        internal static Exception MethodNotDefinedForType(object p0, object p1) {
            return new ArgumentException(string.Format("Method '{0}' is not defined for type '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "The method '{0}.{1}' is not a property accessor"
        /// </summary>
        internal static Exception MethodNotPropertyAccessor(object p0, object p1) {
            return new ArgumentException(string.Format("The method '{0}.{1}' is not a property accessor", p0, p1));
        }

        /// <summary>
        /// NotImplementedException with message like "The method or operation is not implemented."
        /// </summary>
        internal static Exception MethodOrOperatorNotImplemented() {
            return new NotImplementedException("The method or operation is not implemented.");
        }

        /// <summary>
        /// InvalidOperationException with message like "This method exists only to keep the compiler happy."
        /// </summary>
        internal static Exception MethodShouldNotBeCalled() {
            return new InvalidOperationException("This method exists only to keep the compiler happy.");
        }

        /// <summary>
        /// InvalidOperationException with message like "No method '{0}' on type '{1}' is compatible with the supplied arguments."
        /// </summary>
        internal static Exception MethodWithArgsDoesNotExistOnType(object p0, object p1) {
            return new InvalidOperationException(string.Format("No method '{0}' on type '{1}' is compatible with the supplied arguments.", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "More than one method '{0}' on type '{1}' is compatible with the supplied arguments."
        /// </summary>
        internal static Exception MethodWithMoreThanOneMatch(object p0, object p1) {
            return new InvalidOperationException(string.Format("More than one method '{0}' on type '{1}' is compatible with the supplied arguments.", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "Missing Target."
        /// </summary>
        internal static Exception MissingTarget() {
            return new InvalidOperationException("Missing Target.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Missing Test."
        /// </summary>
        internal static Exception MissingTest() {
            return new InvalidOperationException("Missing Test.");
        }

        /// <summary>
        /// ArgumentException with message like "Elements must be variables or parameters: {0}"
        /// </summary>
        internal static Exception MustBeVariableOrParameter(object p0) {
            return new ArgumentException(string.Format("Elements must be variables or parameters: {0}", p0));
        }

        /// <summary>
        /// System.Scripting.Runtime.InvalidImplementationException with message like "CreateScopeExtension must return a scope extension."
        /// </summary>
        internal static Exception MustReturnScopeExtension() {
            return new System.Scripting.Runtime.InvalidImplementationException("CreateScopeExtension must return a scope extension.");
        }

        /// <summary>
        /// InvalidOperationException with message like "{0}.{1} has no publiclly visible method."
        /// </summary>
        internal static Exception NoCallableMethods(object p0, object p1) {
            return new InvalidOperationException(string.Format("{0}.{1} has no publiclly visible method.", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "No code to compile."
        /// </summary>
        internal static Exception NoCodeToCompile() {
            return new InvalidOperationException("No code to compile.");
        }

        /// <summary>
        /// ArgumentException with message like "No default value for a given type."
        /// </summary>
        internal static Exception NoDefaultValue() {
            return new ArgumentException("No default value for a given type.");
        }

        /// <summary>
        /// InvalidOperationException with message like "No exception."
        /// </summary>
        internal static Exception NoException() {
            return new InvalidOperationException("No exception.");
        }

        /// <summary>
        /// ArgumentException with message like "No explicit cast from {0} to {1}"
        /// </summary>
        internal static Exception NoExplicitCast(object p0, object p1) {
            return new ArgumentException(string.Format("No explicit cast from {0} to {1}", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "No implicit cast from {0} to {1}"
        /// </summary>
        internal static Exception NoImplicitCast(object p0, object p1) {
            return new ArgumentException(string.Format("No implicit cast from {0} to {1}", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "no instance for call."
        /// </summary>
        internal static Exception NoInstanceForCall() {
            return new InvalidOperationException("no instance for call.");
        }

        /// <summary>
        /// InvalidOperationException with message like "No or Invalid rule produced"
        /// </summary>
        internal static Exception NoOrInvalidRuleProduced() {
            return new InvalidOperationException("No or Invalid rule produced");
        }

        /// <summary>
        /// TypeLoadException with message like "The operation requires a non-generic type for {0}, but this represents generic types only"
        /// </summary>
        internal static Exception NonGenericWithGenericGroup(object p0) {
            return new TypeLoadException(string.Format("The operation requires a non-generic type for {0}, but this represents generic types only", p0));
        }

        /// <summary>
        /// ArgumentException with message like "'{0}' is not a member of type '{1}'"
        /// </summary>
        internal static Exception NotAMemberOfType(object p0, object p1) {
            return new ArgumentException(string.Format("'{0}' is not a member of type '{1}'", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "The operands for operator '{0}' do not match the parameters of method '{1}'."
        /// </summary>
        internal static Exception OperandTypesDoNotMatchParameters(object p0, object p1) {
            return new InvalidOperationException(string.Format("The operands for operator '{0}' do not match the parameters of method '{1}'.", p0, p1));
        }

        /// <summary>
        /// NotImplementedException with message like "The operator '{0}' is not implemented for type '{1}'"
        /// </summary>
        internal static Exception OperatorNotImplementedForType(object p0, object p1) {
            return new NotImplementedException(string.Format("The operator '{0}' is not implemented for type '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentOutOfRangeException with message like "{0} must be greater than or equal to {1}"
        /// </summary>
        internal static Exception OutOfRange(object p0, object p1) {
            return new ArgumentOutOfRangeException(string.Format("{0} must be greater than or equal to {1}", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "ParameterExpression of type '{0}' cannot be used for delegate parameter of type '{1}'"
        /// </summary>
        internal static Exception ParameterExpressionNotValidAsDelegate(object p0, object p1) {
            return new ArgumentException(string.Format("ParameterExpression of type '{0}' cannot be used for delegate parameter of type '{1}'", p0, p1));
        }

        /// <summary>
        /// ArgumentException with message like "Parameter not captured"
        /// </summary>
        internal static Exception ParameterNotCaptured() {
            return new ArgumentException("Parameter not captured");
        }

        /// <summary>
        /// ArgumentException with message like "The property '{0}' has no 'get' accessor"
        /// </summary>
        internal static Exception PropertyDoesNotHaveGetter(object p0) {
            return new ArgumentException(string.Format("The property '{0}' has no 'get' accessor", p0));
        }

        /// <summary>
        /// ArgumentException with message like "The property '{0}' has no 'set' accessor"
        /// </summary>
        internal static Exception PropertyDoesNotHaveSetter(object p0) {
            return new ArgumentException(string.Format("The property '{0}' has no 'set' accessor", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Property '{0}' is not defined for type '{1}'"
        /// </summary>
        internal static Exception PropertyNotDefinedForType(object p0, object p1) {
            return new ArgumentException(string.Format("Property '{0}' is not defined for type '{1}'", p0, p1));
        }

        /// <summary>
        /// MissingMemberException with message like "Property {0} is read-only"
        /// </summary>
        internal static Exception PropertyReadonly(object p0) {
            return new MissingMemberException(string.Format("Property {0} is read-only", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Queue empty."
        /// </summary>
        internal static Exception QueueEmpty() {
            return new InvalidOperationException("Queue empty.");
        }

        /// <summary>
        /// System.Scripting.Runtime.UnboundLocalException with message like "Local variable '{0}' referenced before assignment."
        /// </summary>
        internal static Exception ReferencedBeforeAssignment(object p0) {
            return new System.Scripting.Runtime.UnboundLocalException(string.Format("Local variable '{0}' referenced before assignment.", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Removing an event handler that is not registered."
        /// </summary>
        internal static Exception RemovingUnregisteredEvent() {
            return new InvalidOperationException("Removing an event handler that is not registered.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Removing not registered handler."
        /// </summary>
        internal static Exception RemovingUnregisteredHandler() {
            return new InvalidOperationException("Removing not registered handler.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Runtime constants require a bound delegate."
        /// </summary>
        internal static Exception RtConstRequiresBundDelegate() {
            return new InvalidOperationException("Runtime constants require a bound delegate.");
        }

        #if !SILVERLIGHT
        /// <summary>
        /// System.Runtime.InteropServices.COMException with message like "Marshal.SetComObjectData failed."
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2201:DoNotRaiseReservedExceptionTypes")]
        internal static Exception SetComObjectDataFailed() {
            return new System.Runtime.InteropServices.COMException("Marshal.SetComObjectData failed.");
        }
        #endif

        /// <summary>
        /// ArgumentException with message like "Invalid type - should be subclass of LanguageContext."
        /// </summary>
        internal static Exception ShouldBeSubclassOfLangContext() {
            return new ArgumentException("Invalid type - should be subclass of LanguageContext.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Stack changed while enumerating."
        /// </summary>
        internal static Exception StackChangedWhileEnumerationg() {
            return new InvalidOperationException("Stack changed while enumerating.");
        }

        /// <summary>
        /// InvalidOperationException with message like "Statement not on the stack."
        /// </summary>
        internal static Exception StatementNotOnStack() {
            return new InvalidOperationException("Statement not on the stack.");
        }

        /// <summary>
        /// ArgumentException with message like "Type {0} contains generic parameters"
        /// </summary>
        internal static Exception TypeContainsGenericParameters(object p0) {
            return new ArgumentException(string.Format("Type {0} contains generic parameters", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Type {0} is a generic type definition"
        /// </summary>
        internal static Exception TypeIsGeneric(object p0) {
            return new ArgumentException(string.Format("Type {0} is a generic type definition", p0));
        }

        #if !SILVERLIGHT
        /// <summary>
        /// System.Runtime.InteropServices.COMException with message like "TypeLib '{0}' does not contain COM interface '{1}'."
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2201:DoNotRaiseReservedExceptionTypes")]
        internal static Exception TypeLibDoesNotContainInterface(object p0, object p1) {
            return new System.Runtime.InteropServices.COMException(string.Format("TypeLib '{0}' does not contain COM interface '{1}'.", p0, p1));
        }
        #endif

        /// <summary>
        /// ArgumentException with message like "Type '{0}' does not have a default constructor"
        /// </summary>
        internal static Exception TypeMissingDefaultConstructor(object p0) {
            return new ArgumentException(string.Format("Type '{0}' does not have a default constructor", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Type '{0}' is not IEnumerable"
        /// </summary>
        internal static Exception TypeNotIEnumerable(object p0) {
            return new ArgumentException(string.Format("Type '{0}' is not IEnumerable", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Type parameter is {0}. Expected a delegate."
        /// </summary>
        internal static Exception TypeParameterIsNotDelegate(object p0) {
            return new InvalidOperationException(string.Format("Type parameter is {0}. Expected a delegate.", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "The unary operator {0} is not defined for the type '{1}'."
        /// </summary>
        internal static Exception UnaryOperatorNotDefined(object p0, object p1) {
            return new InvalidOperationException(string.Format("The unary operator {0} is not defined for the type '{1}'.", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "Unexpected coalesce operator."
        /// </summary>
        internal static Exception UnexpectedCoalesceOperator() {
            return new InvalidOperationException("Unexpected coalesce operator.");
        }

        /// <summary>
        /// ArgumentException with message like "Expected event from {0}.{1}, got event from {2}.{3}."
        /// </summary>
        internal static Exception UnexpectedEvent(object p0, object p1, object p2, object p3) {
            return new ArgumentException(string.Format("Expected event from {0}.{1}, got event from {2}.{3}.", p0, p1, p2, p3));
        }

        /// <summary>
        /// System.Scripting.ArgumentTypeException with message like "Expected type {0}, got {1}."
        /// </summary>
        internal static Exception UnexpectedType(object p0, object p1) {
            return new System.Scripting.ArgumentTypeException(string.Format("Expected type {0}, got {1}.", p0, p1));
        }

        /// <summary>
        /// InvalidOperationException with message like "Unexpected VarEnum {0}."
        /// </summary>
        internal static Exception UnexpectedVarEnum(object p0) {
            return new InvalidOperationException(string.Format("Unexpected VarEnum {0}.", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled binary: {0}"
        /// </summary>
        internal static Exception UnhandledBinary(object p0) {
            return new ArgumentException(string.Format("Unhandled binary: {0}", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled binding "
        /// </summary>
        internal static Exception UnhandledBinding() {
            return new ArgumentException("Unhandled binding ");
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled Binding Type: {0}"
        /// </summary>
        internal static Exception UnhandledBindingType(object p0) {
            return new ArgumentException(string.Format("Unhandled Binding Type: {0}", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled method call: {0}"
        /// </summary>
        internal static Exception UnhandledCall(object p0) {
            return new ArgumentException(string.Format("Unhandled method call: {0}", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled convert: {0}"
        /// </summary>
        internal static Exception UnhandledConvert(object p0) {
            return new ArgumentException(string.Format("Unhandled convert: {0}", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled convert from decimal to {0}"
        /// </summary>
        internal static Exception UnhandledConvertFromDecimal(object p0) {
            return new ArgumentException(string.Format("Unhandled convert from decimal to {0}", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled convert to decimal from {0}"
        /// </summary>
        internal static Exception UnhandledConvertToDecimal(object p0) {
            return new ArgumentException(string.Format("Unhandled convert to decimal from {0}", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled Expression Type: {0}"
        /// </summary>
        internal static Exception UnhandledExpressionType(object p0) {
            return new ArgumentException(string.Format("Unhandled Expression Type: {0}", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled member access: {0}"
        /// </summary>
        internal static Exception UnhandledMemberAccess(object p0) {
            return new ArgumentException(string.Format("Unhandled member access: {0}", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unhandled unary: {0}"
        /// </summary>
        internal static Exception UnhandledUnary(object p0) {
            return new ArgumentException(string.Format("Unhandled unary: {0}", p0));
        }

        /// <summary>
        /// ArgumentException with message like "Unknown binding type"
        /// </summary>
        internal static Exception UnknownBindingType() {
            return new ArgumentException("Unknown binding type");
        }

        /// <summary>
        /// InvalidOperationException with message like "unknown lift type: '{0}'."
        /// </summary>
        internal static Exception UnknownLiftType(object p0) {
            return new InvalidOperationException(string.Format("unknown lift type: '{0}'.", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "unknown member type: '{0}'. "
        /// </summary>
        internal static Exception UnknownMemberType(object p0) {
            return new InvalidOperationException(string.Format("unknown member type: '{0}'. ", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Attempting to wrap an unsupported enum type."
        /// </summary>
        internal static Exception UnsupportedEnumType() {
            return new InvalidOperationException("Attempting to wrap an unsupported enum type.");
        }

        /// <summary>
        /// ArgumentException with message like "User-defined operator method '{0}' must be static."
        /// </summary>
        internal static Exception UserDefinedOperatorMustBeStatic(object p0) {
            return new ArgumentException(string.Format("User-defined operator method '{0}' must be static.", p0));
        }

        /// <summary>
        /// ArgumentException with message like "User-defined operator method '{0}' must not be void."
        /// </summary>
        internal static Exception UserDefinedOperatorMustNotBeVoid(object p0) {
            return new ArgumentException(string.Format("User-defined operator method '{0}' must not be void.", p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "Variable '{0}' of type '{1}' is not defined in scope '{2}'."
        /// </summary>
        internal static Exception VariableNotDefined(object p0, object p1, object p2) {
            return new InvalidOperationException(string.Format("Variable '{0}' of type '{1}' is not defined in scope '{2}'.", p0, p1, p2));
        }

        /// <summary>
        /// NotImplementedException with message like "Variant.GetAccessor cannot handle {0}."
        /// </summary>
        internal static Exception VariantGetAccessorNYI(object p0) {
            return new NotImplementedException(string.Format("Variant.GetAccessor cannot handle {0}.", p0));
        }

        /// <summary>
        /// NotImplementedException with message like "Variant.ToObject cannot handle {0}."
        /// </summary>
        internal static Exception VariantToObjectNYI(object p0) {
            return new NotImplementedException(string.Format("Variant.ToObject cannot handle {0}.", p0));
        }


        // *** END GENERATED CODE ***

        #endregion


    }
}
