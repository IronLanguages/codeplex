abort(".NET Framework is required.") unless defined?(System::Guid)

def make_id
  @id += 1
  "#{@name}_#{@id}"
end

def out str
  @out.print(' ' * @indent)
  @out.puts str
end

def indent
  @indent += 2
end

def unindent
  @indent -= 2
end

def generate dir
  full_path = File.join(ENV["DLR_ROOT"], dir)
  file_count = 0
  
  dirs = []
  files = [] 

  Dir.foreach(full_path) do |entry|
    next if entry == '.' or entry == '..'
    
    if File.directory? File.join(full_path, entry)
      dirs << entry
    else
      files << entry
    end    
  end
  
  dirs.each do |entry|
    puts entry_relative_path = File.join(dir, entry)
    
    out %{<Directory Id="Dir_#{make_id}" Name="#{entry}">}
    indent
    generate entry_relative_path
    unindent
    out %{</Directory>}
  end
  
  unless files.empty?
    out %{<Component Id="Comp_#{make_id}" DiskId="1" Guid="#{System::Guid.new_guid}">}
    indent
    
    files.each do |entry|
      entry_relative_path = File.join(dir, entry)
      out %{<File Id="File_#{make_id}" Source="$(var.DlrRoot)\\#{entry_relative_path.gsub('/', '\\')}" />}
    end
    
    unindent
    out %{</Component>}
  end
end

def generate_wxi name, dir
  puts "#{name}.wxi:"
  puts dir
  @name = name
  @id = 0
  @indent = 0
  File.open("#{name}.wxi", "w") do |f|
    @out = f
    out %{<?xml version="1.0" encoding="utf-8"?>}
    out %{<!-- Generated by #{File.basename(__FILE__)} -->}
    out %{<Include Id="LibsInclude_#{name}">}
    indent
    generate(dir)
    unindent
    out %{</Include>}
  end
  puts
end

WXIs = [
  ["Samples",      "Languages/Ruby/Samples"],
  ["IronRubyLibs", "Languages/Ruby/Libs"],
  ["RubyLibs",     "External.LCA_RESTRICTED/Languages/Ruby/redist-libs/ruby"],
]

WXIs.each { |name, dir| generate_wxi name, dir }

