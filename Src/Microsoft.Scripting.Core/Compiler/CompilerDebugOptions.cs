/* ****************************************************************************
 *
 * Copyright (c) Microsoft Corporation. 
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/

using System.Globalization;
using System.Security;

namespace System.Linq.Expressions {

    /// <summary>
    /// This class holds onto internal debugging options of the compiler and
    /// dynamic sites. These options can be set via an environment variable,
    /// for example:
    /// 
    /// set LAMBDACOMPILER_DEBUG=ShowTrees,ShowRules
    /// 
    /// These options are for internal debugging only, and should not be
    /// exposed through any public APIs.
    /// 
    /// TODO: Should these be debug only? If so, should this whole class, and
    /// all associated types (ExpressionWriter, DebugILGen) become debug only?
    /// 
    /// TODO: can we enable this in Silverlight builds somehow? Possibly
    /// something like late binding to a known type name that holds onto
    /// options?
    /// </summary>
    internal static class CompilerDebugOptions {

        // Add to global suppression?
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        static CompilerDebugOptions() {
#if SILVERLIGHT
            // Prevent warning about unassigned variables
            _showTrees = false;
            _dumpTrees = false;
            _showRules = false;
            _showScopes = false;
            _showIL = false;
            _dumpIL = false;
#else
            string opts;
            try {
                opts = Environment.GetEnvironmentVariable("lambdacompiler_debug");
            } catch (SecurityException) {
                return;
            }

            if (opts == null) {
                return;
            }

            foreach (string opt in opts.Split(' ', ';', ',')) {
                switch (opt.ToLower(CultureInfo.InvariantCulture)) {
                    case "showtrees":
                        _showTrees = true;
                        break;
                    case "dumptrees":
                        _dumpTrees = true;
                        break;
                    case "showrules":
                        _showRules = true;
                        break;
                    case "showscopes":
                        _showScopes = true;
                        break;
                    case "showil":
                        _showIL = true;
                        break;
                    case "dumpil":
                        _dumpIL = true;
                        break;
                    // ignore unknown options
                }
            }
#endif
        }

        // These fields are actually readonly but FxCop gets confused if
        // they're marked that way
        private static bool _showTrees;
        private static bool _dumpTrees;
        private static bool _showRules;
        private static bool _showScopes;
        private static bool _showIL;
        private static bool _dumpIL;

        /// <summary>
        /// Print generated Abstract Syntax Trees to the console
        /// </summary>
        internal static bool ShowTrees {
            get { return _showTrees; }
        }

        /// <summary>
        /// Write out generated Abstract Syntax Trees as files in the current directory
        /// </summary>
        internal static bool DumpTrees {
            get { return _dumpTrees; }
        }

        /// <summary>
        /// Print generated action dispatch rules to the console
        /// </summary>
        internal static bool ShowRules {
            get { return _showRules; }
        }

        /// <summary>
        /// Print the scopes and closures that get generated by the compiler
        /// </summary>
        internal static bool ShowScopes {
            get { return _showScopes; }
        }

        /// <summary>
        /// Write IL to a text file as it is generated.
        /// </summary>
        internal static bool DumpIL {
            get { return _dumpIL; }
        }

        /// <summary>
        /// Prints the IL to the console as it is generated.
        /// </summary>
        internal static bool ShowIL {
            get { return _showIL; }
        }
    }
}