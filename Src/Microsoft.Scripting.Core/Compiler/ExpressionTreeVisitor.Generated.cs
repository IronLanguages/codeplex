/* ****************************************************************************
 *
 * Copyright (c) Microsoft Corporation. 
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/

namespace System.Linq.Expressions {
    public partial class ExpressionTreeVisitor {
        private delegate Expression VistorDelegate(ExpressionTreeVisitor rewriter, Expression expression);

        private static readonly VistorDelegate[] _Visitors = new VistorDelegate[] {
            #region Generated ExpressionVisitor Delegates

            // *** BEGIN GENERATED CODE ***
            // generated by function: gen_visitor_delegates from: generate_tree.py

            DefaultVisitBinaryExpression,                               //    Add
            DefaultVisitBinaryExpression,                               //    AddChecked
            DefaultVisitBinaryExpression,                               //    And
            DefaultVisitBinaryExpression,                               //    AndAlso
            DefaultVisitUnaryExpression,                                //    ArrayLength
            DefaultVisitBinaryExpression,                               //    ArrayIndex
            DefaultVisitMethodCallExpression,                           //    Call
            DefaultVisitBinaryExpression,                               //    Coalesce
            DefaultVisitConditionalExpression,                          //    Conditional
            DefaultVisitConstantExpression,                             //    Constant
            DefaultVisitUnaryExpression,                                //    Convert
            DefaultVisitUnaryExpression,                                //    ConvertChecked
            DefaultVisitBinaryExpression,                               //    Divide
            DefaultVisitBinaryExpression,                               //    Equal
            DefaultVisitBinaryExpression,                               //    ExclusiveOr
            DefaultVisitBinaryExpression,                               //    GreaterThan
            DefaultVisitBinaryExpression,                               //    GreaterThanOrEqual
            DefaultVisitInvocationExpression,                           //    Invoke
            DefaultVisitLambdaExpression,                               //    Lambda
            DefaultVisitBinaryExpression,                               //    LeftShift
            DefaultVisitBinaryExpression,                               //    LessThan
            DefaultVisitBinaryExpression,                               //    LessThanOrEqual
            DefaultVisitListInitExpression,                             //    ListInit
            DefaultVisitMemberExpression,                               //    MemberAccess
            DefaultVisitMemberInitExpression,                           //    MemberInit
            DefaultVisitBinaryExpression,                               //    Modulo
            DefaultVisitBinaryExpression,                               //    Multiply
            DefaultVisitBinaryExpression,                               //    MultiplyChecked
            DefaultVisitUnaryExpression,                                //    Negate
            DefaultVisitUnaryExpression,                                //    UnaryPlus
            DefaultVisitUnaryExpression,                                //    NegateChecked
            DefaultVisitNewExpression,                                  //    New
            DefaultVisitNewArrayExpression,                             //    NewArrayInit
            DefaultVisitNewArrayExpression,                             //    NewArrayBounds
            DefaultVisitUnaryExpression,                                //    Not
            DefaultVisitBinaryExpression,                               //    NotEqual
            DefaultVisitBinaryExpression,                               //    Or
            DefaultVisitBinaryExpression,                               //    OrElse
            DefaultVisitParameterExpression,                            //    Parameter
            DefaultVisitBinaryExpression,                               //    Power
            DefaultVisitUnaryExpression,                                //    Quote
            DefaultVisitBinaryExpression,                               //    RightShift
            DefaultVisitBinaryExpression,                               //    Subtract
            DefaultVisitBinaryExpression,                               //    SubtractChecked
            DefaultVisitUnaryExpression,                                //    TypeAs
            DefaultVisitTypeBinaryExpression,                           //    TypeIs
            DefaultVisitActionExpression,                               //    ActionExpression
            DefaultVisitAssignmentExpression,                           //    Assign
            DefaultVisitBlock,                                          //    Block
            DefaultVisitBreakStatement,                                 //    BreakStatement
            DefaultVisitLambdaExpression,                               //    Generator
            DefaultVisitContinueStatement,                              //    ContinueStatement
            DefaultVisitDeleteExpression,                               //    Delete
            DefaultVisitDoStatement,                                    //    DoStatement
            DefaultVisitEmptyStatement,                                 //    EmptyStatement
            DefaultVisitLabeledStatement,                               //    LabeledStatement
            DefaultVisitLocalScopeExpression,                           //    LocalScope
            DefaultVisitLoopStatement,                                  //    LoopStatement
            DefaultVisitUnaryExpression,                                //    OnesComplement
            DefaultVisitReturnStatement,                                //    ReturnStatement
            DefaultVisitScopeExpression,                                //    Scope
            DefaultVisitSwitchStatement,                                //    SwitchStatement
            DefaultVisitThrowStatement,                                 //    ThrowStatement
            DefaultVisitTryStatement,                                   //    TryStatement
            DefaultVisitVariableExpression,                             //    Variable
            DefaultVisitYieldStatement,                                 //    YieldStatement
            DefaultVisitIndexedPropertyExpression,                      //    IndexedProperty
            DefaultVisitExtensionExpression,                            //    Extension

            // *** END GENERATED CODE ***

            #endregion
        };

        #region Generated ExpressionVisitor Methods

        // *** BEGIN GENERATED CODE ***
        // generated by function: gen_visitor_methods from: generate_tree.py

        // ActionExpression
        private static Expression DefaultVisitActionExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((ActionExpression)node);
        }

        // AssignmentExpression
        private static Expression DefaultVisitAssignmentExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((AssignmentExpression)node);
        }

        // BinaryExpression
        private static Expression DefaultVisitBinaryExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((BinaryExpression)node);
        }

        // Block
        private static Expression DefaultVisitBlock(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((Block)node);
        }

        // BreakStatement
        private static Expression DefaultVisitBreakStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((BreakStatement)node);
        }

        // ConditionalExpression
        private static Expression DefaultVisitConditionalExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((ConditionalExpression)node);
        }

        // ConstantExpression
        private static Expression DefaultVisitConstantExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((ConstantExpression)node);
        }

        // ContinueStatement
        private static Expression DefaultVisitContinueStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((ContinueStatement)node);
        }

        // DeleteExpression
        private static Expression DefaultVisitDeleteExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((DeleteExpression)node);
        }

        // DoStatement
        private static Expression DefaultVisitDoStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((DoStatement)node);
        }

        // EmptyStatement
        private static Expression DefaultVisitEmptyStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((EmptyStatement)node);
        }

        // IndexedPropertyExpression
        private static Expression DefaultVisitIndexedPropertyExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((IndexedPropertyExpression)node);
        }

        // InvocationExpression
        private static Expression DefaultVisitInvocationExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((InvocationExpression)node);
        }

        // LabeledStatement
        private static Expression DefaultVisitLabeledStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((LabeledStatement)node);
        }

        // LambdaExpression
        private static Expression DefaultVisitLambdaExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((LambdaExpression)node);
        }

        // ListInitExpression
        private static Expression DefaultVisitListInitExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((ListInitExpression)node);
        }

        // LocalScopeExpression
        private static Expression DefaultVisitLocalScopeExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((LocalScopeExpression)node);
        }

        // LoopStatement
        private static Expression DefaultVisitLoopStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((LoopStatement)node);
        }

        // MemberExpression
        private static Expression DefaultVisitMemberExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((MemberExpression)node);
        }

        // MemberInitExpression
        private static Expression DefaultVisitMemberInitExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((MemberInitExpression)node);
        }

        // MethodCallExpression
        private static Expression DefaultVisitMethodCallExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((MethodCallExpression)node);
        }

        // NewArrayExpression
        private static Expression DefaultVisitNewArrayExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((NewArrayExpression)node);
        }

        // NewExpression
        private static Expression DefaultVisitNewExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((NewExpression)node);
        }

        // ParameterExpression
        private static Expression DefaultVisitParameterExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((ParameterExpression)node);
        }

        // ReturnStatement
        private static Expression DefaultVisitReturnStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((ReturnStatement)node);
        }

        // ScopeExpression
        private static Expression DefaultVisitScopeExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((ScopeExpression)node);
        }

        // SwitchStatement
        private static Expression DefaultVisitSwitchStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((SwitchStatement)node);
        }

        // ThrowStatement
        private static Expression DefaultVisitThrowStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((ThrowStatement)node);
        }

        // TryStatement
        private static Expression DefaultVisitTryStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((TryStatement)node);
        }

        // TypeBinaryExpression
        private static Expression DefaultVisitTypeBinaryExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((TypeBinaryExpression)node);
        }

        // UnaryExpression
        private static Expression DefaultVisitUnaryExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((UnaryExpression)node);
        }

        // VariableExpression
        private static Expression DefaultVisitVariableExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((VariableExpression)node);
        }

        // YieldStatement
        private static Expression DefaultVisitYieldStatement(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.Visit((YieldStatement)node);
        }

        // *** END GENERATED CODE ***

        #endregion

        // ExpressionType.Extension
        private static Expression DefaultVisitExtensionExpression(ExpressionTreeVisitor visitor, Expression node) {
            return visitor.VisitExtension(node);
        }
    }
}
