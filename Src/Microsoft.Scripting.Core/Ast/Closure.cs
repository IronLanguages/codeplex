/* ****************************************************************************
 *
 * Copyright (c) Microsoft Corporation. 
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/
using System; using Microsoft;


using Microsoft.Scripting.Runtime;

namespace Microsoft.Scripting.Ast {
    /// <summary>
    /// If the delegate generated by the Lambda compiler needs to either be a closure, or close
    /// over constant pool, the delegate itself will close over the instance of this object.
    /// </summary>
    public class Closure {

        /// <summary>
        /// Representation of parent scope (and the language context)
        /// TODO: remove
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public readonly CodeContext Context;

        /// <summary>
        /// The constant pool
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2105:ArrayFieldsShouldNotBeReadOnly")]
        public readonly object[] Constants;

        /// <summary>
        /// The environment tuple, which stores closed over variables from the
        /// parent scope
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
        public readonly Tuple Environment;

        public Closure(CodeContext context, object[] constants, Tuple environment) {
            Context = context;
            Constants = constants;
            Environment = environment;
        }
    }
}
