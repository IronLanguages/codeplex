/* ****************************************************************************
 *
 * Copyright (c) Microsoft Corporation. 
 *
 * This source code is subject to terms and conditions of the Microsoft Public License. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Microsoft Public License, please send an email to 
 * dlr@microsoft.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Microsoft Public License.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/
using System; using Microsoft;


using System.Collections.Generic;
using Microsoft.Scripting;
using Microsoft.Scripting.Runtime;

namespace IronPython.Runtime.Types {
    internal static partial class TypeInfo {
        public static Dictionary<string, Operators> InitializeOperatorTable() {
            Dictionary<string, Operators> pyOp = new Dictionary<string, Operators>();

            #region Generated PythonOperator Mapping

            // *** BEGIN GENERATED CODE ***
            // generated by function: gen_operatorMapping from: generate_ops.py

            pyOp["__add__"] = Operators.Add;
            pyOp["__radd__"] = Operators.ReverseAdd;
            pyOp["__iadd__"] = Operators.InPlaceAdd;
            pyOp["__sub__"] = Operators.Subtract;
            pyOp["__rsub__"] = Operators.ReverseSubtract;
            pyOp["__isub__"] = Operators.InPlaceSubtract;
            pyOp["__pow__"] = Operators.Power;
            pyOp["__rpow__"] = Operators.ReversePower;
            pyOp["__ipow__"] = Operators.InPlacePower;
            pyOp["__mul__"] = Operators.Multiply;
            pyOp["__rmul__"] = Operators.ReverseMultiply;
            pyOp["__imul__"] = Operators.InPlaceMultiply;
            pyOp["__floordiv__"] = Operators.FloorDivide;
            pyOp["__rfloordiv__"] = Operators.ReverseFloorDivide;
            pyOp["__ifloordiv__"] = Operators.InPlaceFloorDivide;
            pyOp["__div__"] = Operators.Divide;
            pyOp["__rdiv__"] = Operators.ReverseDivide;
            pyOp["__idiv__"] = Operators.InPlaceDivide;
            pyOp["__truediv__"] = Operators.TrueDivide;
            pyOp["__rtruediv__"] = Operators.ReverseTrueDivide;
            pyOp["__itruediv__"] = Operators.InPlaceTrueDivide;
            pyOp["__mod__"] = Operators.Mod;
            pyOp["__rmod__"] = Operators.ReverseMod;
            pyOp["__imod__"] = Operators.InPlaceMod;
            pyOp["__lshift__"] = Operators.LeftShift;
            pyOp["__rlshift__"] = Operators.ReverseLeftShift;
            pyOp["__ilshift__"] = Operators.InPlaceLeftShift;
            pyOp["__rshift__"] = Operators.RightShift;
            pyOp["__rrshift__"] = Operators.ReverseRightShift;
            pyOp["__irshift__"] = Operators.InPlaceRightShift;
            pyOp["__and__"] = Operators.BitwiseAnd;
            pyOp["__rand__"] = Operators.ReverseBitwiseAnd;
            pyOp["__iand__"] = Operators.InPlaceBitwiseAnd;
            pyOp["__or__"] = Operators.BitwiseOr;
            pyOp["__ror__"] = Operators.ReverseBitwiseOr;
            pyOp["__ior__"] = Operators.InPlaceBitwiseOr;
            pyOp["__xor__"] = Operators.ExclusiveOr;
            pyOp["__rxor__"] = Operators.ReverseExclusiveOr;
            pyOp["__ixor__"] = Operators.InPlaceExclusiveOr;
            pyOp["__lt__"] = Operators.LessThan;
            pyOp["__gt__"] = Operators.GreaterThan;
            pyOp["__le__"] = Operators.LessThanOrEqual;
            pyOp["__ge__"] = Operators.GreaterThanOrEqual;
            pyOp["__eq__"] = Operators.Equals;
            pyOp["__ne__"] = Operators.NotEquals;
            pyOp["__lg__"] = Operators.LessThanGreaterThan;

            // *** END GENERATED CODE ***

            #endregion

            pyOp["__getitem__"] = Operators.GetItem;
            pyOp["__setitem__"] = Operators.SetItem;
            pyOp["__delitem__"] = Operators.DeleteItem;
            pyOp["__cmp__"] = Operators.Compare;
            pyOp["__pos__"] = Operators.Positive;
            pyOp["__neg__"] = Operators.Negate;
            pyOp["__invert__"] = Operators.OnesComplement;
            pyOp["__repr__"] = Operators.CodeRepresentation;
            pyOp["__len__"] = Operators.Length;
            pyOp["__divmod__"] = Operators.DivMod;
            pyOp["__rdivmod__"] = Operators.ReverseDivMod;
            pyOp["__getattr__"] = Operators.GetBoundMember;
            pyOp["__pow__"] = Operators.Power;
            pyOp["__contains__"] = Operators.Contains;

            pyOp["__abs__"] = Operators.AbsoluteValue;

            return pyOp;
        }
    }
}
